
export PROJECT_ID=$(gcloud config get-value project)
export PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')
export PROJECT_NAME=$(gcloud projects describe $PROJECT_ID --format='value(name)')
export REGION=us-east4

export SERVERLESS_VPC_CONNECTOR=cymbalconnector
export DB_INSTANCE_NAME=greetingsql
export DB_INSTANCE_PASSWORD=password123
export DB_DATABASE=greeting-db
export DB_USER=greeting-user
export DB_PASSWORD=greetpassword123

export GREET_SERVICE_NAME=greet-svc
export GREET_SERVICE_IMAGE=greet-img
export SERVERLESS_VPC_CONNECTOR=cymbalconnector
 # as it already existed; using the existing connector with a name used before
export SA_NAME=sa-api-oauth

echo $PROJECT_ID
echo $PROJECT_NUMBER
echo $PROJECT_NAME
echo $REGION

echo $SERVERLESS_VPC_CONNECTOR
echo $DB_INSTANCE_NAME
echo $DB_INSTANCE_PASSWORD
echo $DB_DATABASE
echo $DB_USER
echo $DB_PASSWORD

echo $GREET_SERVICE_NAME
echo $GREET_SERVICE_IMAGE
echo $SERVERLESS_VPC_CONNECTOR


➜  echo $SERVERLESS_VPC_CONNECTOR
cymbalconnector

➜  gcloud services enable \
    sqladmin.googleapis.com \
    run.googleapis.com \
    vpcaccess.googleapis.com \
    servicenetworking.googleapis.com


gcloud compute addresses create google-managed-services-default \
    --global \
    --purpose=VPC_PEERING \
    --prefix-length=20 \
    --network=projects/$PROJECT_ID/global/networks/default

Existing so get details

➜  cymbal-eats git:(main) gcloud compute addresses list --filter google-managed-services-default
NAME                             ADDRESS/RANGE    TYPE      PURPOSE      NETWORK  REGION  SUBNET  STATUS
google-managed-services-default  10.135.128.0/20  INTERNAL  VPC_PEERING  default                  RESERVED



gcloud sql instances create $DB_INSTANCE_NAME \
    --project=$PROJECT_ID \
    --network=projects/$PROJECT_ID/global/networks/default \
    --no-assign-ip \
    --database-version=POSTGRES_14 \
    --cpu=2 \
    --memory=4GB \
    --region=$REGION \
    --root-password=${DB_INSTANCE_PASSWORD}

➜  gcloud sql instances  list --filter $DB_INSTANCE_NAME
Listed 0 items.

➜  gcloud sql instances create $DB_INSTANCE_NAME \
    --project=$PROJECT_ID \
    --network=projects/$PROJECT_ID/global/networks/default \
    --no-assign-ip \
    --database-version=POSTGRES_14 \
    --cpu=2 \
    --memory=4GB \
    --region=$REGION \
    --root-password=${DB_INSTANCE_PASSWORD}
Creating Cloud SQL instance for POSTGRES_14...done.
Created [https://sqladmin.googleapis.com/sql/v1beta4/projects/PROJECT_ID/instances/menu-catalog].
NAME          DATABASE_VERSION  LOCATION    TIER              PRIMARY_ADDRESS  PRIVATE_ADDRESS  STATUS
menu-catalog  POSTGRES_14       us-east4-a  db-custom-2-4096  -                10.9.98.34       RUNNABLE
➜

gcloud sql databases create $DB_DATABASE --instance=$DB_INSTANCE_NAME

gcloud sql users create ${DB_USER} \
    --password=$DB_PASSWORD \
    --instance=$DB_INSTANCE_NAME

export DB_INSTANCE_IP=$(gcloud sql instances describe $DB_INSTANCE_NAME \
    --format=json | jq \
    --raw-output ".ipAddresses[].ipAddress")

echo $DB_INSTANCE_IP


gcloud compute networks vpc-access connectors create ${SERVERLESS_VPC_CONNECTOR} \
    --region=${REGION} \
    --range=10.8.0.0/28

Existing

➜  cymbal-eats git:(main) gcloud compute networks vpc-access connectors list --region=$REGION --filter=${SERVERLESS_VPC_CONNECTOR}
CONNECTOR_ID     REGION    NETWORK  IP_CIDR_RANGE  SUBNET  SUBNET_PROJECT  MACHINE_TYPE  MIN_INSTANCES  MAX_INSTANCES  MIN_THROUGHPUT  MAX_THROUGHPUT  STATE
cymbalconnector  us-east4  default  10.8.12.0/28                           e2-micro      2              10             200             1000            READY


➜  sb-cloud-sql-oauth-int-ip git:(main) ✗ pwd
~/source/gcp/cloudrun/sb-cloud-sql-oauth-int-ip




➜  gcloud builds submit --region=$REGION --tag $REGION-docker.pkg.dev/$PROJECT_ID/quickstart-docker-repo/$GREET_SERVICE_IMAGE:latest


gcloud run deploy $GREET_SERVICE_NAME \
    --image=$REGION-docker.pkg.dev/$PROJECT_ID/quickstart-docker-repo/$GREET_SERVICE_IMAGE:latest \
    --region $REGION \
    --allow-unauthenticated \
    --set-env-vars DB_DATABASE=${DB_DATABASE} \
    --set-env-vars DB_HOST="${PROJECT_ID}:${REGION}:${DB_INSTANCE_NAME}" \
    --vpc-connector $SERVERLESS_VPC_CONNECTOR \
    --service-account "${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --project=$PROJECT_ID \
    --quiet


Now AuthN OAuth2 to Cloud SQL
===========================
https://cloud.google.com/blog/topics/developers-practitioners/authenticating-cloud-sql-postgresql-iam-service-accounts/

Need TLS 1.3 to connect using oauth2.( enableIamAuth)
So TLS 1.3 was not available in Java 1.8 ; Need to use Java 11
So Dockerfile base images need to change
Notice the pom

            <dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-gcp-dependencies</artifactId>
				<version>1.2.8.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>com.google.cloud</groupId>
				<artifactId>spring-cloud-gcp-dependencies</artifactId>
				<version>3.4.4</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

        <dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-gcp-starter-sql-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.cloud.sql</groupId>
			<artifactId>postgres-socket-factory</artifactId>
			<version>1.9.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.auth</groupId>
			<artifactId>google-auth-library-oauth2-http</artifactId>
			<version>1.15.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.auth</groupId>
			<artifactId>google-auth-library-credentials</artifactId>
			<version>1.15.0</version>
		</dependency>


application.properties need to have
spring.datasource.hikari.data-source-properties.socketFactory=com.google.cloud.sql.postgres.SocketFactory
spring.datasource.hikari.data-source-properties.enableIamAuth=true
spring.datasource.hikari.data-source-properties.sslmode=disable

## Enable pg audit
##gcloud sql instances patch $CLOUDSQL_INSTANCE --database-flags cloudsql.enable_pgaudit=on,pgaudit.log=all

➜  gcloud sql instances patch ${DB_INSTANCE_NAME}  --database-flags cloudsql.iam_authentication=on
The following message will be used for the patch API method.
{"name": "menu-catalog", "project": "PROJECT_ID", "settings": {"databaseFlags": [{"name": "cloudsql.iam_authentication", "value": "on"}]}}
WARNING: This patch modifies database flag values, which may require your
instance to be restarted. Check the list of supported flags -
https://cloud.google.com/sql/docs/postgres/flags - to see if your instance will
be restarted when this patch is submitted.

Do you want to continue (Y/n)?  y

Patching Cloud SQL instance...done.
Updated

(The service account email should be of the form sa-name@projectid.iam - OMITTING the “.gserviceaccount.com” suffix, or it will throw an error)
gcloud iam service-accounts create ${SA_NAME} \
    --description="Cloud SQL Service Account GREET" \
    --display-name="Cloud SQL Service Account GREET"
➜  echo $SA_NAME
➜  export SA_EMAIL_SHORT="${SA_NAME}@${PROJECT_ID}.iam"
➜  echo $SA_EMAIL_SHORT
➜  export SA_EMAIL="${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com"
➜  echo $SA_EMAIL


➜  gcloud sql users create ${SA_EMAIL_SHORT} --instance=${DB_INSTANCE_NAME} --type=cloud_iam_service_account

➜  gcloud sql users list --instance=${DB_INSTANCE_NAME}
NAME                                     HOST  TYPE                       PASSWORD_POLICY
greeting-user                                  BUILT_IN
postgres                                       BUILT_IN
sa-name@PROJECT_ID.iam                         CLOUD_IAM_SERVICE_ACCOUNT


➜  gcloud projects add-iam-policy-binding ${PROJECT_ID} --member="serviceAccount:${SA_EMAIL}" --role='roles/cloudsql.instanceUser'
➜  gcloud projects add-iam-policy-binding ${PROJECT_ID} --member="serviceAccount:${SA_EMAIL}" --role='roles/cloudsql.client'

➜  gcloud run deploy $GREET_SERVICE_NAME \
    --image=$REGION-docker.pkg.dev/$PROJECT_ID/quickstart-docker-repo/$GREET_SERVICE_IMAGE:latest \
    --region $REGION \
    --allow-unauthenticated \
    --set-env-vars DB_DATABASE=${DB_DATABASE} \
    --set-env-vars DB_HOST="${PROJECT_ID}:${REGION}:${DB_INSTANCE_NAME}" \
    --vpc-connector $SERVERLESS_VPC_CONNECTOR \
    --service-account "${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com" \
    --project=$PROJECT_ID \
    --quiet

➜  curl -X GET  https://$GREET_SERVICE_NAME-vtyatvjjvq-uk.a.run.app/greeting  -H "Authorization: bearer $(gcloud auth print-identity-token)"
1;Hello, World; Time now:2023-02-14T14:02:56.478093!; from Current User:SA_NAME@PROJECT_ID.iam; from Session User:SA_NAME@PROJECT_ID.iam%

Flyway issue with permission GRANT should be given permission to create flyway-schema-history table..
Problem with flyway table creation
Disabled Flyway and it is working
spring.flyway.enabled=false

